package outlook;

import java.io.ByteArrayOutputStream;
import java.net.URI;
import java.security.GeneralSecurityException;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.mail.*;
import javax.activation.DataHandler;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.SendFailedException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;

import com.sun.mail.util.MailSSLSocketFactory;

import net.fortuna.ical4j.data.CalendarOutputter;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.DateTime;
import net.fortuna.ical4j.model.Dur;
import net.fortuna.ical4j.model.TimeZone;
import net.fortuna.ical4j.model.TimeZoneRegistry;
import net.fortuna.ical4j.model.TimeZoneRegistryFactory;
import net.fortuna.ical4j.model.component.VAlarm;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.parameter.Cn;
import net.fortuna.ical4j.model.parameter.PartStat;
import net.fortuna.ical4j.model.parameter.Role;
import net.fortuna.ical4j.model.parameter.Rsvp;
import net.fortuna.ical4j.model.property.Action;
import net.fortuna.ical4j.model.property.Attendee;
import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.Description;
import net.fortuna.ical4j.model.property.Duration;
import net.fortuna.ical4j.model.property.Location;
import net.fortuna.ical4j.model.property.Method;
import net.fortuna.ical4j.model.property.Organizer;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Repeat;
import net.fortuna.ical4j.model.property.Summary;
import net.fortuna.ical4j.model.property.Version;
import net.fortuna.ical4j.util.UidGenerator;
public class ICal4jEmail2 {
	private static String from = "351526562@qq.com";
	private static String to = "leo.liu08@sap.com";
	private static String subject = "test";
	private static String content = "hihihi";
	public static void main(String []args) throws GeneralSecurityException{
		Properties props = new Properties();
		props.setProperty("mail.smtp.host", "smtp.qq.com");

		props.put("mail.smtp.auth", "true");
		   MailSSLSocketFactory sf = new MailSSLSocketFactory();
		   sf.setTrustAllHosts(true);
		   props.put("mail.smtp.ssl.enable", "true");
		   props.put("mail.smtp.ssl.socketFactory", sf);
		Authenticator auth = new Authenticator() {
			@Override 
			protected PasswordAuthentication getPasswordAuthentication() {
				String username = "351526562@qq.com";
				String pwd = "azwfuubluuwxbhca";
				return new PasswordAuthentication(username, pwd);
			}
			};
			Session mailSession = Session.getInstance(props, auth);
			Message msg = new MimeMessage(mailSession);
			try {
				

	            msg.setFrom(new InternetAddress(from));
	            msg.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
	            msg.setSubject("Outlook Meeting Request Using JavaMail");

	            StringBuffer sb = new StringBuffer();
	            String room="Room 1";
	            StringBuffer buffer = sb.append("BEGIN:VCALENDAR\n" +
	                    "PRODID:-//Microsoft Corporation//Outlook 9.0 MIMEDIR//EN\n" +
	                    "VERSION:2.0\n" +
	                    "METHOD:REQUEST\n" +
	                    "BEGIN:VEVENT\n" +
	                    "ATTENDEE;ROLE=REQ-PARTICIPANT;RSVP=TRUE:MAILTO:leo.liu08@sap.com.com\n" +
	                    "ORGANIZER:MAILTO:351526562@qq.com\n" +
	                    "DTSTART:20190115T053000Z\n" +
	                    "DTEND:20190115T070000Z\n" +
	                    "LOCATION:"+room+"\n" +
	                    "TRANSP:OPAQUE\n" +
	                    "SEQUENCE:0\n" +
	                    "UID:"+UUID.randomUUID().toString()+"\n" +
	                    "DTSTAMP:20190114T120102Z\n" +
	                    "CATEGORIES:Meeting\n" +
	                    "DESCRIPTION:This the time of the interview.\n\n" +
	                    "SUMMARY:Interview\n" +
	                    "PRIORITY:5\n" +
	                    "CLASS:PUBLIC\n" +
	                    "BEGIN:VALARM\n" +
	                    "TRIGGER:PT1440M\n" +
	                    "ACTION:DISPLAY\n" +
	                    "DESCRIPTION:Reminder\n" +
	                    "END:VALARM\n" +
	                    "END:VEVENT\n" +
	                    "END:VCALENDAR");
	            
	            
	            BodyPart messageBodyPart = new MimeBodyPart();

	            // Fill the msg
	            messageBodyPart.setHeader("Content-Class", "urn:content-  classes:calendarmessage");
	            messageBodyPart.setHeader("Content-ID", "calendar_message");
	            messageBodyPart.setDataHandler(new DataHandler(
	                    new ByteArrayDataSource(buffer.toString(), "text/calendar;method=REQUEST")));// very important

	            // Create a Multipart
	            Multipart multipart = new MimeMultipart();

	            // Add part one
	            multipart.addBodyPart(messageBodyPart);

	            // Put parts in msg
	            msg.setContent(multipart);
	            
	            
				msg.saveChanges();
			} catch (Exception ex) {
			}
			sendEmail(msg);
	}

	public static Boolean sendEmail(Message msg){
		try {
			Transport.send(msg);
			return true;
		}catch (SendFailedException e) {
			System.out.println(e);
			return false;
		} catch (Exception e) {
			Timer timer = new Timer();
			System.out.println(e);
			return false;
		}
	}
	private class Mail extends TimerTask {
		private Timer timer = null;
		private Message msg = null;
		public Mail(Message msg, Timer timer) {
			this.msg = msg;
			this.timer = timer;
			}
		@Override
		public void run() {
		if (!send()) {//发送失败，重发
		timer.schedule(new Mail(msg, timer), 10000);
		} else {
			timer.cancel();
		}
		}
		private boolean send() {
		try {
			Transport.send(msg);
			return true;
			} catch (Exception e) {
			System.out.println(e);
			return false;
			}
		}
	}
	public static Multipart getContentText() throws Exception{
		TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();
		TimeZone timezone = registry.getTimeZone("Asia/Shanghai");
		String location = "21-C2";
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.setTimeZone(timezone);
		cal.set(2019, 3-1, 13, 13, 45);
		DateTime start = new DateTime(cal.getTime());
		cal.set(2019, 3-1, 13, 18, 55);
		DateTime end = new DateTime(cal.getTime());
		VEvent vevent = new VEvent(start, end, subject);
		vevent.getProperties().add(timezone.getVTimeZone().getTimeZoneId());
		vevent.getProperties().add(new Location(location));//会议地点
		vevent.getProperties().add(new Summary(subject));//邮件主题
		vevent.getProperties().add(new Description(content));//邮件内容
		vevent.getProperties().add(new UidGenerator("meeting invite").generateUid());
		vevent.getProperties().add(new Organizer(URI.create("mailto:" + from))); 
		Set<String> emailSet = new HashSet<String>();
		emailSet.add(from);
		emailSet.add(to);
		int i = 1;
		for (String email : emailSet) {
			Attendee attendee = new Attendee(URI.create("mailto:" + email));
			if(1 == i){
				attendee.getParameters().add(Role.REQ_PARTICIPANT);
			}else{
			attendee.getParameters().add(Role.OPT_PARTICIPANT);
			}
			attendee.getParameters().add(new Cn("Developer" + i));
			vevent.getProperties().add(attendee);
			i++;
			}
		VAlarm valarm = new VAlarm(new Dur(0, 0, -10, 0));
		valarm.getProperties().add(new Repeat(1));
		valarm.getProperties().add(new Duration(new Dur(0, 0, 10, 0)));
		valarm.getProperties().add(new Summary("Event Alarm"));
		valarm.getProperties().add(Action.DISPLAY);
		valarm.getProperties().add(new Description("Progress Meeting at 9:30am"));
		vevent.getAlarms().add(valarm);
		Calendar icsCalendar = new Calendar();
		icsCalendar.getProperties().add(new ProdId("-//Events Calendar//iCal4j 1.0//EN"));
		icsCalendar.getProperties().add(CalScale.GREGORIAN);
		icsCalendar.getProperties().add(Version.VERSION_2_0);
		icsCalendar.getProperties().add(Method.REQUEST);
		icsCalendar.getComponents().add(vevent);
		CalendarOutputter co = new CalendarOutputter(false);
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		co.output(icsCalendar, os);
		byte[] mailbytes = os.toByteArray();
		BodyPart mbp = new MimeBodyPart();
		mbp.setContent(mailbytes, "text/calendar;method=REQUEST;charset=UTF-8");
		MimeMultipart mm = new MimeMultipart();
		mm.setSubType("related");
		mm.addBodyPart(mbp);
		return mm;
	}
}

	
	
	
	
	


	
	

